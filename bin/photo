#!/usr/bin/env raku

use GraphicsMagick;

if not @*ARGS.elems {
    print qq:to/HERE/;

    Usage: {$*PROGRAM.basename} image [mode] [options...]

    This program uses the 'GraphicsMagick' library to manipulate
    an image for use on a photo montage website or a photo album.

    It can crop an image to a default 100x100 size about a selected 
    point. Dimensions and points are given in pixels: X=width, Y=height.
    The coordinate system used has its origin at the top-left corner of
    the image with positive values increasing to the right and down.

    Modes:
      show         - Shows primary image attributes
      ahow all     - Shows all available attibutes
      prep         - Shows the image dimensions in pixels along with other
                     details based on selected options and values, including 
                     a copy of the original with a border superimposed upon 
                     the selected interior of the picture.
      crop=WxH+X+Y - Crops the image to WxH pixels centered at X and Y of the 
                     image. If the width and height are not specified, they 
                     default to 100 pixels. If the X and Y are not specified,
                     they default to the center of the image. If one of either 
                     pair of values are specified, it is assumed to be the 
                     value of both. If only one value is entered, all four 
                     arguments take that value.

    Options:
      color=X    - Changes the border color to X [default: white]
      border=X   - Changes the border with to X pixels [default: 2]
      debug      - Developer use

    HERE
    exit;
}

=begin comment
#my $str = run('some prog', :out).out.slurp;
my $str = run("gm", :out).out.slurp;
say $str;
=end comment


# modes
my $show  = 0;
my $prep  = 0;
my $crop  = 0;
my $all   = 0;

# defaults
my $height = 100;
my $width  = 100;
my $x; # 0.5 * image width
my $y; # 0.5 * image height

# options
my $debug = 0;
# other
my %images; # key: basename, value: path
for @*ARGS {
    when /:i ['.jpg' | '.jpeg' | '.png' ] $/ and $_.IO.f {
        my $image = $_.IO.absolute; # may have to have an IO object
        if %images{$image}:exists {
            note "NOTE: Skipping duplicate image '$image'";
        }
        else {
            %images{$image.IO.basename} = $image;
        }
    }
    when /^d[ebug]?/ {
        ++$debug
    }
    when /^s[how]?/ {
        ++$show
    }
    when /^a[ll]?/ {
        ++$all
    }
    when /^p[rep]?/ {
        ++$prep; # overrides crop mode, but not its values
    }
    when /^c[rop]? $/ {
        ++$crop
    }
    when /^c[rop] '=' (\d+) x (\d+) '+'  (\d+)  '+' (\d+)  $/ {
        # WxH+X+Y
        ++$crop;
        $width  = +$0;
        $height = +$1;
        $x      = +$2;
        $y      = +$3;
    }
    when /^c[rop] '=' (\d+)         '+'  (\d+)  '+' (\d+)  $/ {
        # W+X+Y
        $width  = +$0;
        $height = +$0;
        $x      = +$1;
        $y      = +$2;
    }
    when /^c[rop] '=' (\d+) x (\d+) '+'  (\d+)             $/ {
        # WxH+X
        $width  = +$0;
        $height = +$1;
        $x      = +$2;
        $y      = +$2;
    }
    when /^c[rop] '=' (\d+)         '+'  (\d+)             $/ {
        # W+X
        $width  = +$0;
        $height = +$0;
        $x      = +$1;
        $y      = +$1;
    }
    when /^c[rop] '=' (\d+)                                $/ {
        # W
        $width  = +$0;
        $height = +$0;
        $x      = +$0;
        $y      = +$0;
    }

    default {
        note "FATAL: Unknown input arg '$_'";
    }
}

if not %images.elems {
    if $debug {
        # use the image in the resources<image>
        my $image = get-test-image;
        %images{$image} = 1;
    }
    else {
        die "FATAL: No image was entered.";
    }
}

my $image = %images.keys.head; # get first elem
my $gm = GM.new: :$image, :debug;
#$image = get-test-image;

my $o = GM.new: :$image;
print qq:to/HERE/;
image:           {$o.image.IO.basename}
time:            {$o.localtime.Str} 
width (pixels):  {$o.width}
height (pixels): {$o.height}
HERE

