#!/usr/bin/env raku

use GraphicsMagick::GM;
use GraphicsMagick::Utils;
use Ask;

my $usage = "Usage: {$*PROGRAM.basename} image [mode] [options...][help]";
if not @*ARGS.elems {
    say $usage;
    exit;
}

sub help() {
    print qq:to/HERE/;

    $usage

    This program uses the 'GraphicsMagick' library to manipulate
    an image for use on a photo montage website or a photo album.

    It can crop an image to a default 100x100 size about a selected
    point. Dimensions and points are given in pixels: X=width,
    Y=height.  The coordinate system used has its origin at the
    top-left corner of the image with positive values increasing to
    the right and down.

    Output images are written to the local directory unless the
    'to-dir=X' option is used.

    Modes:
      display      - With an X display, shows the raw image
      show         - Shows primary image attributes
      show all     - Shows all available attibutes
      crop=WxH+X+Y - Crops the image to WxH pixels centered at X and
                     Y of the image. If the width and height are not
                     specified, they default to 100 pixels. If the X
                     and Y are not specified, they default to the
                     center of the image. If one of either pair of
                     values are specified, it is assumed to be the
                     value of both. If only one value is entered,
                     all four arguments take that value.

                     If an X display is available, shows a copy of
                     the original with a border superimposed upon
                     the selected crop area of the picture.
      execute      - Executes the crop to produce a new image with
                     the current set of crop parameters

    Options:
      color=X    - Changes the border color to X [default: white]
      border=X   - Changes the border with to X pixels [default: 2]
      to-dir=X   - Output directory [default: '.']
      name=X     - Output image name [default: '\$image.mod']
      debug      - Developer use

    HERE
    exit;
} # sub help

my %opts = set <
    color
    border
    to-dir
    name
    debug
>;
my %modes = set <
    show
    all
    crop
    display
    execute
>;

=begin comment
#my $str = run('some prog', :out).out.slurp;
my $str = run("gm", :out).out.slurp;
say $str;
=end comment

# modes
my $show    = 0;
my $crop    = 0;
my $all     = 0;
my $display = 0;
my $execute = 0;

# default options
my $to-dir = '.'; # output directory
my $height = 100;
my $width  = 100;
my $x = 0.5 * $width;
my $y = 0.5 * $height;
my $name;

# other options
my $debug = 0;
my $force = 0;

# misc other vars
my $DEBUG = 0;
my %images; # key: basename, value: path
my $image;  # the current image
my %mode-used;
my %opt-used;
for @*ARGS {
    when /:i ['.jpg' | '.jpeg' | '.png' ] $/ and $_.IO.f {
        $image = $_.IO.absolute; # may have to have an IO object
        if %images{$image}:exists {
            note "NOTE: Skipping duplicate image '$image'";
        }
        else {
            %images{$image.IO.basename} = $image;
        }
    }
    when /^h[elp]?/ {
        help(); # exits from there
    }
    when /^d[isplay] $/ {
        ++$display;
        %mode-used<display> = 1;
    }
    when /^f[orce]?/ {
        ++$force;
        %opt-used<force> = 1;
    }
    when /^d[ebug]?/ {
        ++$debug;
        %opt-used<debug> = 1;
    }
    when /^n[ame]? '=' (\S) / {
        $name = -$0;
        %opt-used<name> = 1;
    }
    when /^t[o '-' dir]? '=' (\S) / {
        ++$to-dir = ~$0;
        %opt-used<to-dir> = 1;
    }
    when /^s[how]?/ {
        ++$show;
        %mode-used<show> = 1;
    }
    when /^a[ll]?/ {
        ++$all;
        %mode-used<all> = 1;
    }
    when /^c[rop]? $/ {
        ++$crop;
        %mode-used<crop> = 1;
    }
    when /^c[rop] '=' (\d+) x (\d+) '+'  (\d+)  '+' (\d+)  $/ {
        # WxH+X+Y
        ++$crop;
        $width  = +$0;
        $height = +$1;
        $x      = +$2;
        $y      = +$3;
        %mode-used<crop> = 1;
        %opt-used<width> = 1;
        %opt-used<height> = 1;
        %opt-used<x> = 1;
        %opt-used<y> = 1;
    }
    when /^c[rop] '=' (\d+)         '+'  (\d+)  '+' (\d+)  $/ {
        # W+X+Y
        $width  = +$0;
        $height = +$0;
        $x      = +$1;
        $y      = +$2;
        %opt-used<width> = 1;
        %opt-used<height> = 1;
        %opt-used<x> = 1;
        %opt-used<y> = 1;
    }
    when /^c[rop] '=' (\d+) x (\d+) '+'  (\d+)             $/ {
        # WxH+X
        $width  = +$0;
        $height = +$1;
        $x      = +$2;
        $y      = +$2;
        %mode-used<crop> = 1;
        %opt-used<width> = 1;
        %opt-used<height> = 1;
        %opt-used<x> = 1;
        %opt-used<y> = 1;
    }
    when /^c[rop] '=' (\d+)         '+'  (\d+)             $/ {
        # W+X
        $width  = +$0;
        $height = +$0;
        $x      = +$1;
        $y      = +$1;
        %mode-used<crop> = 1;
        %opt-used<width> = 1;
        %opt-used<height> = 1;
        %opt-used<x> = 1;
        %opt-used<y> = 1;
    }
    when /^c[rop] '=' (\d+)                                $/ {
        # W
        $width  = +$0;
        $height = +$0;
        $x      = +$0;
        $y      = +$0;
        %mode-used<crop> = 1;
        %opt-used<width> = 1;
        %opt-used<height> = 1;
        %opt-used<x> = 1;
        %opt-used<y> = 1;
    }
    when %opts{$_}:exists or %modes{$_}:exists {
        note "FATAL: Unhandled input arg '$_'";
    }
    default {
        note "FATAL: Unknown input arg '$_'";
    }
}

# special arg debugging
if $DEBUG {
    say "DEBUG args used:";
    say "  Modes:";
    say "    $_" for %mode-used.keys.sort;
    say "  Options:";
    say "    $_" for %opt-used.keys.sort;
    say "Exiting"; exit;
}

if not %images.elems {
    if $debug {
        # use the image in the resources<image>
        my $image = get-test-image;
        %images{$image} = 1;
    }
    else {
        die "FATAL: No image was entered.";
    }
}

my $p = GM.new: :$image;
# set attributes
$p.set-name($name) if $name.defined;

if not %mode-used.elems {
    $p.show;
    exit;
}

if $show {
    if $all {
        $p.show: :all;
    }
    else {
        $p.show;
    }
    exit;
}

if $crop {
    print qq:to/HERE/;
    Crop parameters for image {$p.basename}:
        width:  {$p.c-width}
        height: {$p.c-height}
        x:      {$p.c-x}
        y:      {$p.c-y}
    HERE
    say "Crop is not yet implemented";
    exit;
}

if $execute {
    say "Execute is not yet implemented";
    exit;
}

if $display {
    my $res = $p.display;
    #say "Display is not yet implemented";
    say $res;
    exit;
}
